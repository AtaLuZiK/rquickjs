diff --git a/quickjs.c b/quickjs.c
index a39ff8f..477de31 100644
--- a/quickjs.c
+++ b/quickjs.c
@@ -2108,6 +2108,14 @@ void JS_FreeRuntime(JSRuntime *rt)
     }
 }
 
+#ifdef CONFIG_PARALLEL
+void JS_ResetCtxStack(JSContext *ctx)
+{
+     ctx->rt->stack_top = js_get_stack_pointer();
+}
+#endif
+
+
 JSContext *JS_NewContextRaw(JSRuntime *rt)
 {
     JSContext *ctx;
@@ -27155,6 +27163,26 @@ void JS_SetModuleLoaderFunc(JSRuntime *rt,
     rt->module_loader_opaque = opaque;
 }
 
+#ifdef CONFIG_MODULE_EXPORTS
+/* Hooks into module loading functions */
+int JS_GetModuleExportEntriesCount(JSModuleDef *m) {
+    return m->export_entries_count;
+}
+
+JSValue JS_GetModuleExportEntry(JSContext *ctx, JSModuleDef *m, int idx) {
+    if (idx >= m->export_entries_count || idx < 0)
+        return JS_UNDEFINED;
+    return JS_DupValue(ctx, m->export_entries[idx].u.local.var_ref->value);
+}
+
+JSAtom JS_GetModuleExportEntryName(JSContext *ctx, JSModuleDef *m, int idx) {
+    if (idx >= m->export_entries_count || idx < 0)
+        return JS_ATOM_NULL;
+    return JS_DupAtom(ctx, m->export_entries[idx].export_name);
+}
+#endif
+
+
 /* default module filename normalizer */
 static char *js_default_module_normalize_name(JSContext *ctx,
                                               const char *base_name,
diff --git a/quickjs.h b/quickjs.h
index 92457a2..b55d4c5 100644
--- a/quickjs.h
+++ b/quickjs.h
@@ -352,6 +352,11 @@ JSRuntime *JS_GetRuntime(JSContext *ctx);
 void JS_SetClassProto(JSContext *ctx, JSClassID class_id, JSValue obj);
 JSValue JS_GetClassProto(JSContext *ctx, JSClassID class_id);
 
+#ifdef CONFIG_PARALLEL
+void JS_ResetCtxStack(JSContext *ctx);
+#endif
+
+
 /* the following functions are used to select the intrinsic object to
    save memory */
 JSContext *JS_NewContextRaw(JSRuntime *rt);
@@ -1034,6 +1039,13 @@ int JS_SetModuleExport(JSContext *ctx, JSModuleDef *m, const char *export_name,
                        JSValue val);
 int JS_SetModuleExportList(JSContext *ctx, JSModuleDef *m,
                            const JSCFunctionListEntry *tab, int len);
+                           
+#ifdef CONFIG_MODULE_EXPORTS
+int JS_GetModuleExportEntriesCount(JSModuleDef *m);
+JSValue JS_GetModuleExportEntry(JSContext *ctx, JSModuleDef *m, int idx);
+JSAtom JS_GetModuleExportEntryName(JSContext *ctx, JSModuleDef *m, int idx);
+#endif
+
 
 #undef js_unlikely
 #undef js_force_inline
