--- quickjs/quickjs.c	2020-03-16 17:00:15.000000000 +0100
+++ quickjs/rquickjs.c	2020-04-10 16:51:23.086484954 +0200
@@ -2010,6 +2010,14 @@
 }
 #endif
 
+#ifdef CONFIG_PARALLEL
+void JS_ResetCtxStack(JSContext *ctx)
+{
+     ctx->stack_top = js_get_stack_pointer();
+}
+#endif
+
+
 JSContext *JS_NewContextRaw(JSRuntime *rt)
 {
     JSContext *ctx;
@@ -26246,6 +26254,26 @@
     rt->module_loader_opaque = opaque;
 }
 
+#ifdef CONFIG_MODULE_EXPORTS
+/* Hooks into module loading functions */
+int JS_GetModuleExportEntriesCount(JSModuleDef *m) {
+    return m->export_entries_count;
+}
+
+JSValue JS_GetModuleExportEntry(JSContext *ctx, JSModuleDef *m, int idx) {
+    if (idx >= m->export_entries_count || idx < 0)
+        return JS_UNDEFINED;
+    return JS_DupValue(ctx, m->export_entries[idx].u.local.var_ref->value);
+}
+
+JSAtom JS_GetModuleExportEntryName(JSContext *ctx, JSModuleDef *m, int idx) {
+    if (idx >= m->export_entries_count || idx < 0)
+        return JS_ATOM_NULL;
+    return JS_DupAtom(ctx, m->export_entries[idx].export_name);
+}
+#endif
+
+
 /* default module filename normalizer */
 static char *js_default_module_normalize_name(JSContext *ctx,
                                               const char *base_name,
