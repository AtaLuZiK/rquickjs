name: Rust
on:
  push:
    branches:
      - master
      - ci
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-rust_stable-${{ hashFiles('**/Cargo.lock') }}
      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-rust_stable-${{ hashFiles('**/Cargo.lock') }}
      - name: Build cache
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-build-rust_stable-doc-${{ hashFiles('**/Cargo.lock') }}
      - name: Documentation
        uses: actions-rs/cargo@v1
        env:
          DOCS_RS: 1
        with:
          command: doc
          args: --features async-std

  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - default
          - async-std
          - tokio
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          override: true
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-rust_nightly-${{ hashFiles('**/Cargo.lock') }}
      - name: Build cache
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-build-rust_nightly-check-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --no-default-features --features ${{ matrix.features }}

  test:
    needs:
      - format
      - doc
      - check
    strategy:
      fail-fast: ${{ github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/') }}
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            features: default
          - os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            features: async-std
          - os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            features: tokio
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: default
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: async-std
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: tokio
          - os: ubuntu-latest
            rust: beta
            target: x86_64-unknown-linux-gnu
            features: default,async-std
          - os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-gnu
            features: default,async-std
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            features: default,async-std
          - os: windows-latest
            rust: stable-i686-gnu
            target: i686-pc-windows-gnu
            features: default,async-std
          - os: windows-latest
            rust: stable-x86_64-gnu
            target: x86_64-pc-windows-gnu
            features: default,async-std
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup cross linux toolchain ${{ matrix.target }}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.target, '-linux-') && !startsWith(matrix.target, 'x86_64')
        run: |
          if [ "${{ matrix.target }}" = "i686-unknown-linux-gnu" ]; then
            GCC_TARGET=multilib
          else
            GCC_TARGET=$(printf ${{ matrix.target }} | sed 's/-unknown-/-/' | sed 's/arm[^-]*/arm/g')
          fi
          sudo apt-get install -y gcc-${GCC_TARGET}
      - name: Setup Rust ${{ matrix.rust }} [${{ matrix.target }}]
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-rust_${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Build cache
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-build-rust_${{ matrix.rust }}-target_${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Build ${{ matrix.rust }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }} --no-default-features --features ${{ matrix.features }}
      - name: Test ${{ matrix.rust }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target ${{ matrix.target }} --no-default-features --features ${{ matrix.features }} --lib

  publish:
    if: github.repository == 'DelSkayn/rquickjs' && startsWith(github.ref, 'refs/tags/')
    needs:
      - format
      - doc
      - check
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Publish crates
        uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CRATES_TOKEN }}
          args: --no-verify
          #dry-run: true
